
local function find_name(name, children)
	for _, node in pairs(children) do
		if node.name == name then
			return true
		end
	end
	return false
end

function M(name, children)
	children = children or {}
	table.insert(children, 1, N("types"))
	if not find_name(name, children) then
		table.insert(children, 2, N(name))
	end
	return N(name, children)
end

function I(name, children)
	children = children or {}
	table.insert(children, 1, N("types"))
	table.insert(children, 2, N("private"))
	return N(name, children)
end

config.print_ok = false
config.paths = {}

local nodes = {}
local libs = {
	"core",
	"game",
}
local tools = {
	"res_build",
}

local function do_group(root, prefix, name)
	local dir = string.format("%s/%s", root, name)
	local children = dofile(dir .. "/include_order") or {}
	table.insert(children, 1, N("config"))
	table.insert(children, 2, N("types"))
	table.insert(nodes, N(prefix .. name, children))
	table.insert(config.paths, dir .. "/src")
	if root == "lib" then
		table.insert(config.paths, dir .. "/test")
	end
end

for _, name in pairs(libs) do
	do_group("lib", "", name)
end
for _, name in pairs(tools) do
	do_group("tool", "tool_", name)
end

config.order_tree = make_order_tree(
-- extension order
{"hpp", "ipp", "gen_interface"},
-- order nodes
{
	N("togo", nodes),
},
-- explicit path values
{})

config.exclusions = make_inverse_table({
	"togo/core/external/dlmalloc.hpp",
	"togo/core/external/dlmalloc.cpp",
})
config.extension_filter = make_inverse_table({
	"hpp", "ipp", "cpp", "cxx", "gen_interface"
})

config.override_path_value = function(_, path, extension, computed_value)
	if string.match(path, "^togo/[^/]+/config$") then
		return 1
	elseif string.match(path, "^togo/[^/]+/types$") then
		return 2
	elseif extension == "gen_interface" then
		-- Force to the bottom of the include block
		return -1
	end
	return computed_value
end
