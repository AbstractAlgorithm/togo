
local function find_name(name, children)
	for _, node in pairs(children) do
		if node.name == name then
			return true
		end
	end
	return false
end

local R = N

local function M(name, children)
	children = children or {}
	table.insert(children, 1, N("types"))
	if not find_name(name, children) then
		table.insert(children, 2, N(name))
	end
	return N(name, children)
end

local function I(name, children)
	children = children or {}
	table.insert(children, 1, N("types"))
	table.insert(children, 2, N("private"))
	return N(name, children)
end

config.order_tree = make_order_tree(
-- extension order
{"hpp", "ipp", "gen_interface"},
-- order nodes
{
	R("togo", {
		-- core headers
		N("config"),
		N("types"),

		-- modules
		M("error", {
			N("assert"),
		}),
		M("utility", {
			N("tags"),
			N("traits"),
			N("constraints"),
			N("args"),
		}),
		M("math", {}),
		M("log", {
			N("test"),
			N("test_unconfigure"),
		}),
		M("memory", {
			N("jump_block_allocator"),
			N("temp_allocator"),
		}),
		M("collection", {
			N("fixed_array"),
			N("array"),
			N("queue"),
			N("priority_queue"),
			N("hash_map"),
		}),
		M("algorithm", {
			N("sort"),
		}),
		M("string", {}),
		M("hash", {
			N("hash_combiner"),
		}),
		M("system", {
			I("system", {
				N("linux"),
			}),
		}),
		M("filesystem", {
			I("filesystem", {
				N("linux"),
			}),
			I("directory_reader", {
				N("posix"),
			}),
		}),
		M("random", {}),
		M("threading", {
			I("condvar", {
				N("posix"),
			}),
			I("mutex", {
				N("posix"),
			}),
			I("thread", {
				N("posix"),
			}),
			N("task_manager"),
		}),
		M("io", {
			N("proto"),
			N("memory_stream"),
			I("file_stream", {
				N("posix"),
			}),
			N("object_buffer_type"),
			N("object_buffer"),
		}),
		M("kvs", {}),
		M("entity", {
			N("entity_manager"),
		}),
		M("world", {
			N("world_manager"),
		}),
		M("gfx", {
			I("gfx", {
				N("common"),
				N("opengl_common"),
				N("glfw_common"),
				N("glfw"),
				N("sdl_common"),
				N("sdl"),
			}),
			I("display", {
				N("glfw"),
				N("sdl"),
			}),
			N("command"),
			N("generator"),
			N("render_node"),
			I("renderer", {
				N("opengl"),
			}),
			N("shader_def"),
		}),
		M("input", {
			N("input_buffer"),
		}),
		M("resource", {
			N("resource_handler"),
			N("resource_package"),
			N("resource_manager"),
		}),
		M("serialization", {
			N("serializer"),
			N("support"),
			N("binary_serializer"),
			N("fixed_array"),
			N("array"),
			N("string"),
			N("resource", {
				N("resource_metadata"),
				N("test_resource"),
			}),
			N("gfx", {
				N("shader_def"),
				N("render_config"),
			}),
		}),
		M("app", {}),
		M("tool_build", {
			N("resource_compiler"),
			N("package_compiler"),
			N("compiler_manager"),
			N("generator_compiler"),
			N("gfx_compiler"),
			N("interface", {
				N("command_help"),
				N("command_list"),
				N("command_create"),
				N("command_sync"),
				N("command_compile"),
				N("command_pack"),
			}),
		}),
		M("external", {
			N("dlmalloc_import"),
		}),
	})
},
-- explicit path values
{
	["togo/tool_build/config"] = 0,
	["togo/tool_build/types"] = 1,
})

config.exclusions = make_inverse_table({
	"togo/external/dlmalloc.hpp"
})
config.extension_filter = make_inverse_table({
	"hpp", "ipp", "cpp", "cxx", "gen_interface"
})

config.print_ok = false
config.paths = {
	"src",
	"test"
}

config.override_path_value = function(_, path, extension, computed_value)
	if extension == "gen_interface" then
		-- Force to the bottom of the include block
		return -1
	end
	return computed_value
end
